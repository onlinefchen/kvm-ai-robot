name: Generate Weekly KVMARM Report

on:
  schedule:
    # 每周一早上东八区8点 (UTC 0点) 自动生成上周报告
    - cron: '0 0 * * 1'

  workflow_dispatch:
    inputs:
      report_type:
        description: '选择要生成的报告类型'
        required: true
        type: choice
        options:
          - '周报（上周完整报告）'
          - '本周报告'
          - '自定义日期范围'
        default: '周报（上周完整报告）'
      start_date:
        description: '起始日期 (YYYY-MM-DD，仅"自定义日期范围"时需要填写)'
        required: false
        type: string
      end_date:
        description: '结束日期 (YYYY-MM-DD，仅"自定义日期范围"时需要，不填默认为今天)'
        required: false
        type: string
      force_regenerate:
        description: '强制重新生成（覆盖已存在的历史报告，适用于所有报告类型）'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  generate-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install openai anthropic

      - name: Clone KVMARM mailing list
        run: |
          echo "📥 Cloning KVMARM mailing list repository..."
          mkdir -p git
          if [ -d "git/0.git" ]; then
            echo "Repository exists, fetching updates..."
            cd git/0.git
            git fetch --all
            cd ../..
          else
            git clone --mirror https://lore.kernel.org/kvmarm/0 git/0.git
          fi
          du -sh git/0.git
          echo "✅ Mailing list repository ready"

      - name: Generate weekly report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🤖 Generating weekly report..."

          # 设置日期参数
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手动触发
            REPORT_TYPE="${{ inputs.report_type }}"

            if [ "$REPORT_TYPE" = "周报（上周完整报告）" ]; then
              # 生成上周完整报告（周一到周日）
              LAST_WEEK_MONDAY=$(date -d 'monday-1 week' +%Y-%m-%d)
              LAST_WEEK_SUNDAY=$(date -d "${LAST_WEEK_MONDAY} +6 days" +%Y-%m-%d)
              LAST_YEAR=$(date -d "${LAST_WEEK_MONDAY}" +%G)
              LAST_WEEK=$(date -d "${LAST_WEEK_MONDAY}" +%V)
              START_ARG="--start ${LAST_WEEK_MONDAY}"
              END_ARG="--end ${LAST_WEEK_SUNDAY}"
              echo "📅 手动触发 - 周报（上周）: ${LAST_YEAR}年第${LAST_WEEK}周 (${LAST_WEEK_MONDAY} 到 ${LAST_WEEK_SUNDAY})"

            elif [ "$REPORT_TYPE" = "本周报告" ]; then
              # 生成本周报告（本周一到今天）
              THIS_WEEK_MONDAY=$(date -d 'monday' +%Y-%m-%d)
              THIS_WEEK_SUNDAY=$(date -d "${THIS_WEEK_MONDAY} +6 days" +%Y-%m-%d)
              THIS_YEAR=$(date -d "${THIS_WEEK_MONDAY}" +%G)
              THIS_WEEK=$(date -d "${THIS_WEEK_MONDAY}" +%V)
              START_ARG="--start ${THIS_WEEK_MONDAY}"
              END_ARG="--end ${THIS_WEEK_SUNDAY}"
              echo "📅 手动触发 - 本周报告: ${THIS_YEAR}年第${THIS_WEEK}周 (${THIS_WEEK_MONDAY} 到 ${THIS_WEEK_SUNDAY})"

            else
              # 自定义日期范围
              if [ -n "${{ inputs.start_date }}" ]; then
                START_ARG="--start ${{ inputs.start_date }}"
                END_ARG=""
                # 结束日期：如果提供则使用，否则默认为今天
                if [ -n "${{ inputs.end_date }}" ]; then
                  END_ARG="--end ${{ inputs.end_date }}"
                  echo "📅 手动触发 - 自定义日期: ${{ inputs.start_date }} 到 ${{ inputs.end_date }}"
                else
                  TODAY=$(date +%Y-%m-%d)
                  END_ARG="--end ${TODAY}"
                  echo "📅 手动触发 - 自定义日期: ${{ inputs.start_date }} 到 ${TODAY} (默认到今天)"
                fi
              else
                echo "❌ 错误：选择自定义日期范围时必须提供起始日期"
                exit 1
              fi
            fi
          else
            # 定时任务（每周一东八区8点）：生成上周的完整报告
            LAST_WEEK_MONDAY=$(date -d 'monday-1 week' +%Y-%m-%d)
            LAST_WEEK_SUNDAY=$(date -d "${LAST_WEEK_MONDAY} +6 days" +%Y-%m-%d)
            LAST_YEAR=$(date -d "${LAST_WEEK_MONDAY}" +%G)
            LAST_WEEK=$(date -d "${LAST_WEEK_MONDAY}" +%V)
            START_ARG="--start ${LAST_WEEK_MONDAY}"
            END_ARG="--end ${LAST_WEEK_SUNDAY}"
            echo "📅 定时任务 - 周报（上周）: ${LAST_YEAR}年第${LAST_WEEK}周 (${LAST_WEEK_MONDAY} 到 ${LAST_WEEK_SUNDAY})"
          fi
          
          # 自动检测是否使用 AI
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "✅ 检测到 OPENAI_API_KEY，使用 AI 总结"
            AI_ARG="--ai openai --model gpt-4o-mini"
          else
            echo "ℹ️  未检测到 OPENAI_API_KEY，使用基于规则的总结"
            AI_ARG="--ai none"
          fi

          # 检查是否强制重新生成
          FORCE_ARG=""
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # 定时任务：强制覆盖上周报告（确保数据最完整）
            echo "🔄 定时任务模式：将强制覆盖上周报告"
            FORCE_ARG="--force"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.force_regenerate }}" = "true" ]; then
            # 手动触发：按用户选择决定是否强制覆盖
            echo "🔄 强制重新生成模式：将覆盖所有已存在的报告"
            FORCE_ARG="--force"
          fi

          # 执行生成
          python3 analyze_with_ai_summary.py $START_ARG $END_ARG $AI_ARG $FORCE_ARG
          echo "✅ Report generated successfully"

      - name: Create index redirect
        run: |
          echo "📄 Creating index.html redirect to current week..."
          python3 generate_index.py

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Commit and push reports
        run: |
          git add docs/*.html docs/*.md

          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
          else
            YEAR=$(date +%Y)
            WEEK=$(date +%V)
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "chore: Generate weekly report ${YEAR}W${WEEK}" -m "Generated by GitHub Actions" -m "Timestamp: ${TIMESTAMP}"

            # Pull with rebase to handle any remote changes
            echo "📥 Pulling remote changes..."
            git pull --rebase origin main

            # Push the changes
            git push
            echo "✅ Reports committed and pushed"
          fi

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

  deploy:
    needs: generate-report
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
